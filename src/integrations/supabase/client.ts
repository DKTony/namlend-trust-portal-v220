// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { mockSupabase } from './mockClient';

// Prefer environment variables in production. Fallback to generated values for local/dev.
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Use mock client for development when API keys are invalid or missing
const useMockClient = !supabaseUrl || !supabaseKey || 
  supabaseUrl.includes('demo.supabase.co') || 
  supabaseKey === 'demo-anon-key';

// Ensure a singleton across HMR reloads to avoid multiple GoTrueClient warnings
declare global {
  // eslint-disable-next-line no-var
  var __NAM_LEND_SUPABASE__: any | undefined;
}

let supabaseClient: any = globalThis.__NAM_LEND_SUPABASE__;

if (!supabaseClient) {
  if (useMockClient) {
    console.log('ðŸ”§ Using mock Supabase client for development');
    supabaseClient = mockSupabase;
  } else {
    console.log('ðŸ”— Using real Supabase client');
    supabaseClient = createClient<Database>(supabaseUrl, supabaseKey, {
      auth: {
        persistSession: true,
        autoRefreshToken: true,
        detectSessionInUrl: true,
        storage: window.localStorage,
        storageKey: 'namlend-auth'
      },
    });
  }
  globalThis.__NAM_LEND_SUPABASE__ = supabaseClient;
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";
export const supabase = supabaseClient;